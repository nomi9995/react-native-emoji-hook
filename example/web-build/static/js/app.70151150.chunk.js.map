{"version":3,"sources":["../src/utils/index.ts","../src/index.tsx","src/App.tsx","index.js"],"names":["emojiJson","require","emojify","text","texts","Set","split","filter","item","forEach","word","emoji","replaceAll","useEmoji","useState","setText","useCallback","txt","styles","StyleSheet","create","container","flex","alignItems","justifyContent","input","width","height","backgroundColor","fontSize","registerRootComponent","View","style","TextInput","value","onChangeText"],"mappings":"iggEAAIA,EAAYC,EAAQ,IAIXC,EAAU,SAACC,GACtB,IAJ8BC,EAW9B,OAX8BA,EAIUD,EAHjC,IAAI,IAAIE,IAAID,EAAME,MAAM,KAAKC,QAAO,SAACC,GAAD,MAAmB,KAATA,QAI5CC,SAAQ,SAACC,GAChB,IAAMC,EAAQX,EAAUU,GACpBC,IACFR,EAAOA,EAAKS,WAAWF,EAAMC,OAG1BR,GCCMU,EAVO,WACpB,MAAwBC,mBAAS,IAAjC,WAAOX,EAAP,KAAaY,EAAb,KAMA,MAAO,CAACZ,EAJea,uBAAY,SAACC,GAClCF,EAAQb,EAAQe,MACf,MCML,IAAMC,EAASC,IAAWC,OAAO,CAC/BC,UAAW,CACTC,KAAM,EACNC,WAAY,SACZC,eAAgB,UAElBC,MAAO,CACLC,MAAO,OACPC,OAAQ,IACRC,gBAAiB,OACjBC,SAAU,MCjBdC,aDFe,WACb,MAAwBjB,IAAxB,WAAOV,EAAP,KAAaY,EAAb,KACA,OACE,gBAACgB,EAAA,EAAD,CAAMC,MAAOd,EAAOG,WAClB,gBAACY,EAAA,EAAD,CAAWD,MAAOd,EAAOO,MAAOS,MAAO/B,EAAMgC,aAAcpB,U","file":"static/js/app.70151150.chunk.js","sourcesContent":["var emojiJson = require('./emoji.json');\nconst getUniqueWordsFromText = (texts: string): string[] => {\n  return [...new Set(texts.split(' ').filter((item) => item !== ''))];\n};\nexport const emojify = (text: string) => {\n  const allWords = getUniqueWordsFromText(text);\n  allWords.forEach((word: string) => {\n    const emoji = emojiJson[word];\n    if (emoji) {\n      text = text.replaceAll(word, emoji);\n    }\n  });\n  return text;\n};\n","import { useState, useCallback } from 'react';\nimport { emojify } from './utils/index';\n\nconst useEmoji: any = () => {\n  const [text, setText] = useState('');\n\n  const setTextHandler = useCallback((txt: string) => {\n    setText(emojify(txt));\n  }, []);\n\n  return [text, setTextHandler];\n};\n\nexport default useEmoji;\nexport { emojify };\n","import * as React from 'react';\n\nimport { StyleSheet, View, TextInput } from 'react-native';\nimport useEmoji from 'react-native-emoji-hook';\n\nexport default function App() {\n  const [text, setText] = useEmoji();\n  return (\n    <View style={styles.container}>\n      <TextInput style={styles.input} value={text} onChangeText={setText} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  input: {\n    width: '100%',\n    height: 100,\n    backgroundColor: 'gray',\n    fontSize: 30,\n  },\n});\n","import { registerRootComponent } from 'expo';\n\nimport App from './src/App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in the Expo client or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n"],"sourceRoot":""}